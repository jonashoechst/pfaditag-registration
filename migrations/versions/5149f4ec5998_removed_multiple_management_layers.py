"""removed multiple management layers

Revision ID: 5149f4ec5998
Revises: f40c045a389a
Create Date: 2024-03-16 17:59:00.781831

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mysql

import csv
import flask
from registration.models import Group, User
from registration import db
from sqlalchemy.exc import OperationalError, ProgrammingError

# revision identifiers, used by Alembic.
revision = '5149f4ec5998'
down_revision = 'f40c045a389a'
branch_labels = None
depends_on = None


def update_groups_vcp(csv_path="etc/groups_vcp.csv"):
    try:
        group_list = open(csv_path, encoding="utf-8")
        group_reader = csv.reader(group_list, dialect='excel', delimiter=';')

        # skip csv header
        next(group_reader)

        _vcp_id = 1
        vcp = Group.query.get(_vcp_id)
        if vcp is None:
            vcp = Group(
                id=_vcp_id,
                name="Verband Christlicher Pfadfinder*innen",
                website="https://vcp.de",
            )
            db.session.add(vcp)
            flask.current_app.logger.info("Created VCP %s", vcp)
            db.session.commit()

        for _id, _land, _region, _name, _ort, *_ in group_reader:
            # skip empty lines
            if _id == "":
                continue

            try:
                _name = _name[4:] if _name.startswith("VCP ") else _name
                _name = _name[6:] if _name.startswith("Stamm ") else _name
                _name = _name.strip()

                _land_id = int(_id[:2]+"0000")
                land: Group = Group.query.get(_land_id)
                if land is None:
                    land = Group(
                        id=_land_id,
                        name=_land.strip(),
                        parent_id=vcp.id,
                        group_type="Land",
                    )
                    flask.current_app.logger.info("Created Land %s", land)
                    db.session.add(land)
                else:
                    land.parent_id = _vcp_id
                    land.group_type = "Land"
                    group.attributes = {}
                db.session.commit()

                _region_id = int(_id[:4]+"00")
                region: Group = Group.query.get(_region_id)
                if region is None:
                    region = Group(
                        id=_region_id,
                        name=_region.strip(),
                        parent_id=_land_id,
                        group_type="Bezirk/Gau/Region",
                    )
                    flask.current_app.logger.info("Created Region %s", region)
                    db.session.add(region)
                else:
                    region.parent_id = _land_id
                    region.group_type = "Bezirk/Gau/Region"
                    group.attributes = {}
                db.session.commit()

                _group_id = int(_id)
                group: Group = Group.query.get(_group_id)
                if group is None:
                    group = Group(
                        id=_group_id,
                        name=_name.strip(),
                        zip=_ort[:5],
                        city=_ort[6:],
                        parent_id=_region_id,
                        group_type="Stamm",
                    )
                    flask.current_app.logger.info("Created Group %s", group)
                    db.session.add(group)
                else:
                    group.parent_id = _region_id
                    group.group_type = "Stamm"
                    group.attributes = {}

                db.session.commit()

            except ValueError as e:
                flask.current_app.logger.warning("Error parsing group '%s': %s", _id, e)

        db.session.commit()
    except (OperationalError, ProgrammingError) as e:
        flask.current_app.logger.warning("Couldn't update groups: %s", e)
    finally:
        group_list.close()


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('user_permission',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('user_id', sa.String(length=100), nullable=True),
                    sa.Column('group_id', sa.Integer(), nullable=True),
                    sa.ForeignKeyConstraint(['group_id'], ['group.id'], name=op.f('fk_user_permission_group_id_group')),
                    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name=op.f('fk_user_permission_user_id_user')),
                    sa.PrimaryKeyConstraint('id', name=op.f('pk_user_permission'))
                    )

    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.drop_constraint('fk_user_manage_land_id_land', type_='foreignkey')
        batch_op.drop_constraint('fk_user_manage_region_id_region', type_='foreignkey')
        batch_op.drop_column('manage_land_id')
        batch_op.drop_column('manage_region_id')
        batch_op.drop_column('is_manager_land')
        batch_op.drop_column('is_manager_region')
        batch_op.drop_constraint('fk_user_manage_group_id_group', type_='foreignkey')
        batch_op.drop_column('manage_group_id')
        batch_op.drop_column('is_manager_group')

    with op.batch_alter_table('group', schema=None) as batch_op:
        batch_op.drop_constraint('fk_group_land_id_land', type_='foreignkey')
        batch_op.drop_constraint('fk_group_region_id_region', type_='foreignkey')
        batch_op.drop_column('land_id')
        batch_op.drop_column('region_id')
        batch_op.add_column(sa.Column('parent_id', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('attributes', sa.JSON(), nullable=True))
        batch_op.create_foreign_key(batch_op.f('fk_group_parent_id_group'), 'group', ['parent_id'], ['id'])
        batch_op.add_column(sa.Column('group_type', sa.String(length=255), nullable=True))

    op.drop_table('region')
    op.drop_table('land')

    update_groups_vcp()

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    op.create_table('land',
                    sa.Column('id', mysql.INTEGER(display_width=11), autoincrement=True, nullable=False),
                    sa.Column('name', mysql.VARCHAR(length=64), nullable=True),
                    sa.PrimaryKeyConstraint('id'),
                    mysql_collate='utf8mb4_general_ci',
                    mysql_default_charset='utf8mb4',
                    mysql_engine='InnoDB'
                    )

    with op.batch_alter_table('land', schema=None) as batch_op:
        batch_op.create_index('ix_land_name', ['name'], unique=False)

    op.create_table('region',
                    sa.Column('id', mysql.INTEGER(display_width=11), autoincrement=True, nullable=False),
                    sa.Column('name', mysql.VARCHAR(length=64), nullable=True),
                    sa.Column('land_id', mysql.INTEGER(display_width=11), autoincrement=False, nullable=True),
                    sa.ForeignKeyConstraint(['land_id'], ['land.id'], name='fk_region_land_id_land'),
                    sa.PrimaryKeyConstraint('id'),
                    mysql_collate='utf8mb4_general_ci',
                    mysql_default_charset='utf8mb4',
                    mysql_engine='InnoDB'
                    )
    with op.batch_alter_table('region', schema=None) as batch_op:
        batch_op.create_index('ix_region_name', ['name'], unique=False)

    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.add_column(sa.Column('is_manager_region', mysql.TINYINT(display_width=1), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('is_manager_land', mysql.TINYINT(display_width=1), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('manage_region_id', mysql.INTEGER(display_width=11), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('manage_land_id', mysql.INTEGER(display_width=11), autoincrement=False, nullable=True))
        batch_op.create_foreign_key('fk_user_manage_region_id_region', 'region', ['manage_region_id'], ['id'])
        batch_op.create_foreign_key('fk_user_manage_land_id_land', 'land', ['manage_land_id'], ['id'])
        batch_op.add_column(sa.Column('is_manager_group', mysql.TINYINT(display_width=1), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('manage_group_id', mysql.INTEGER(display_width=11), autoincrement=False, nullable=True))
        batch_op.create_foreign_key('fk_user_manage_group_id_group', 'group', ['manage_group_id'], ['id'])

    with op.batch_alter_table('group', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('fk_group_parent_id_group'), type_='foreignkey')
        batch_op.drop_column('attributes')
        batch_op.drop_column('parent_id')
        batch_op.add_column(sa.Column('region_id', mysql.INTEGER(display_width=11), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('land_id', mysql.INTEGER(display_width=11), autoincrement=False, nullable=True))
        batch_op.create_foreign_key('fk_group_region_id_region', 'region', ['region_id'], ['id'])
        batch_op.create_foreign_key('fk_group_land_id_land', 'land', ['land_id'], ['id'])
        batch_op.drop_column('group_type')

    op.drop_table('user_permission')

    # ### end Alembic commands ###
