{% extends "base_leaflet.j2" %}
{% import "bootstrap5/form.html" as wtf %}
{% from 'bootstrap5/form.html' import render_form_row, render_field %}


{% block styles %}
{{ super() }}
<style>
    #map {
        min-height: 400px;
    }
</style>
{% endblock %}

{% block content %}
<div class="row header">
    <div class="col-xs-12">
        <h1>
            {% if _id == "new" %}
            Neue Aktion anlegen
            {% else %}
            Aktion bearbeiten

            <a href="{{ url_for('public.event', event_id=_id) }}" class="btn btn-outline-primary"><i
                    class="fa-solid fa-link"></i></a>
            {% endif %}
        </h1>
    </div>
</div>

<div class="row">
    <div class="col-sm-6 first-column">
        <form action="" method="POST" class="form" role="form" enctype="multipart/form-data">
            {{ form.csrf_token() }}
            {{ render_form_row([form.group_id]) }}
            {{ render_form_row([form.title]) }}
            {{ render_form_row([form.email, form.tel]) }}
            {{ render_form_row([form.date, form.time]) }}
            {{ render_form_row([form.date_end, form.time_end]) }}
            {{ render_form_row([form.description]) }}
            {{ render_form_row([form.lat, form.lon]) }}
            {{ render_field(form.submit) }}
            {{ render_field(form.delete, button_style='danger') }}
        </form>
    </div>
    <div class="col-sm-6 second-column">
        <div class="my-3 h-100">
            <div id="map" class="h-100"></div>
        </div>
    </div>
</div>
{% endblock %}

{% block scripts %}
{{ super() }}
<script>
    // initialize map
    var map = L.map('map')
    L.tileLayer('https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}', {
        attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors, Imagery Â© <a href="https://www.mapbox.com/">Mapbox</a>',
        maxZoom: 18,
        id: 'mapbox/light-v10',
        tileSize: 512,
        zoomOffset: -1,
        accessToken: 'pk.eyJ1IjoiaG9lY2hzdCIsImEiOiJjazVueDhyMWkwenpuM2RydzltNjhraDAzIn0.HntghYG9IBZvVd0bUJEY9Q'
    }).addTo(map);
    var locator = L.control.locate({ locateOptions: { maxZoom: 9 } }).addTo(map);

    var eventStyle = L.VectorMarkers.icon({ icon: 'circle', markerColor: 'var(--bs-primary)' });
    var marker;

    // add marker if lat/lon is set
    function update_marker() {
        lat = $('#lat').val();
        lng = $('#lon').val();

        if (lat && lng) {
            if (marker) {
                marker.setLatLng([lat, lng]);
            } else {
                marker = L.marker([lat, lng], { icon: eventStyle }).addTo(map);
            }
            zoom = map.getZoom();
            map.setView([lat, lng], map.getZoom() ? map.getZoom() : 13);
        } else {
            map.setView([51.3, 10.7], 6);
        }
    }
    update_marker()

    // allow user to click on map to set lat/lon
    map.on('click', function (e) {
        // update marker position or create new one
        if (!window.marker) {
            window.marker = L.marker(e.latlng, { icon: eventStyle }).addTo(map);
        } else {
            window.marker.setLatLng(e.latlng);
        }

        // write lat/lon to form
        $('#lat').val(e.latlng.lat);
        $('#lon').val(e.latlng.lng);
    });

    // update marker position on form change
    $('#lat').on('input', update_marker);
    $('#lon').on('input', update_marker);

</script>
{% endblock %}